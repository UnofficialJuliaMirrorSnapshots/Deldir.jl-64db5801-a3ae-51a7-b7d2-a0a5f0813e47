using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libdeldir"], :libdeldir),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/robertdj/DeldirBuilder/releases/download/v0.1.15"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.15.aarch64-linux-gnu.tar.gz", "bd31668d33ebbc8b240f49888913d6930aed08170506eee6dcf3ad7be4a0629b"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.15.aarch64-linux-musl.tar.gz", "c8594f1ec388d2743ec394935b444e469fe9036c0076df391b1a374ebf7d951d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/DeldirBuilder.v0.1.15.arm-linux-gnueabihf.tar.gz", "8ec7ddd61996f260f07e9204d28d8881c1b7224c5aee64d888bdce4a78e3e823"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/DeldirBuilder.v0.1.15.arm-linux-musleabihf.tar.gz", "b49ab918110b9a98415a1e3d54d8c0beefc0e6605bfb38332dca735558c89230"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.15.i686-linux-gnu.tar.gz", "53b6b01d6a7fe4215074a1147e41ccc00264127683fa83a562ab46805bfd2b52"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.15.i686-linux-musl.tar.gz", "a943ca77e4322e6ec68b933187ac156a0fd6f1d7db69a50e2d3737846c5fad4e"),
    Windows(:i686) => ("$bin_prefix/DeldirBuilder.v0.1.15.i686-w64-mingw32.tar.gz", "c229d4857e9f0494f08a04965ca98155d0bc693573c1a4d514f390b15656f57d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.15.powerpc64le-linux-gnu.tar.gz", "38f80f8e70439ffac45612781195ffe5ec244576aa1aa65ddb9f098edb482569"),
    MacOS(:x86_64) => ("$bin_prefix/DeldirBuilder.v0.1.15.x86_64-apple-darwin14.tar.gz", "d4611e67003d96503e8809f30fcb99a59851818b2c5487e38ad1ac2eb1c5bc0b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.15.x86_64-linux-gnu.tar.gz", "9c01182fcc1015535a43a70eded3d52bbd2570e54cbacd7e39d96f9e3ecc69f7"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.15.x86_64-linux-musl.tar.gz", "c0eb363be8da477acfb9de4e247702c082ab0543d02f821ce289aa3114cb4589"),
    Windows(:x86_64) => ("$bin_prefix/DeldirBuilder.v0.1.15.x86_64-w64-mingw32.tar.gz", "e8dd2706efe2a8023c6ac96b54713d401b242d98619a278b711dca974427bbe9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
