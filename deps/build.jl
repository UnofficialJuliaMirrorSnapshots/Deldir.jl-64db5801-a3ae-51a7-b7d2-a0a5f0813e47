using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libdeldir"], :libdeldir),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/robertdj/DeldirBuilder/releases/download/v0.1.9"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.9.aarch64-linux-gnu.tar.gz", "2f87fadfb24e7d507ee165cf11e23a8c6a541fd302d11f23f8d5f068fe7ee579"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.9.aarch64-linux-musl.tar.gz", "9170999cff5d8d0134cc644a83afe6a8ad01a9336c7619283a58845c5dbe83df"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/DeldirBuilder.v0.1.9.arm-linux-gnueabihf.tar.gz", "0f7a9229fbc0734481d70a641cb15d8756304f9d538dab48892d46ecb1313cdb"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/DeldirBuilder.v0.1.9.arm-linux-musleabihf.tar.gz", "58614cee3164fa849746075b7ae57b428d1c003a01e2ac3e6ab7f3a16b4c0536"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.9.i686-linux-gnu.tar.gz", "4af0ed4d09f94d24621f1288c37add3600858d39ca1f5d0e460da6e122ea46b3"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.9.i686-linux-musl.tar.gz", "7224334f36728f4a8bf55c7e356b177fe78406b0d36ba9d14c76495d97379a5b"),
    Windows(:i686) => ("$bin_prefix/DeldirBuilder.v0.1.9.i686-w64-mingw32.tar.gz", "5da44856b464e2088a000b307c7a4a6019350f50649240f50a2ddf66f3210c35"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.9.powerpc64le-linux-gnu.tar.gz", "b63de26325957dadd4ffa723fa197e68590588ae65b72054e34daac372a32928"),
    MacOS(:x86_64) => ("$bin_prefix/DeldirBuilder.v0.1.9.x86_64-apple-darwin14.tar.gz", "24c557b8e356aa0806d7815190578056c2e6ba39cec9a38e8fc9f1f19a449fce"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/DeldirBuilder.v0.1.9.x86_64-linux-gnu.tar.gz", "268bad782653e34368d4a6960641af1cb36e9401e42d2e72f95ac27b26819020"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/DeldirBuilder.v0.1.9.x86_64-linux-musl.tar.gz", "ff76993de4e733a7b12fc30f3cca5617d8bbc7abe81dd5ccd786fd25eed483a2"),
    Windows(:x86_64) => ("$bin_prefix/DeldirBuilder.v0.1.9.x86_64-w64-mingw32.tar.gz", "93442990f26f33eca9009a32786f078e627b43f5519c1ea7e3f6cd0fd0988e3d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
